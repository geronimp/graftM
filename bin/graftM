#!/usr/bin/env python


##### ##### ##### ##### ##### ##### #####
#                                       #
#                 graftM                #
#                                       #
#  A pipeline for gene centric analyses #
#          of metagenome datasets       #
#                                       #
##### ##### ##### ##### ##### ##### #####

__author__ = "Joel Boyd, Ben Woodcroft"
__copyright__ = "Copyright 2014"
__credits__ = ["Joel Boyd", "Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Joel Boyd, Ben Woodcroft"
__email__ = "joel.boyd near uq.net.au, b.woodcroft near uq.edu.au"
__status__ = "Development"
__version__ = "0.4.0"

from graftm.Run import Run
import argparse

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='''--- graftM %s --- Searches reads for genes using hmms, and places them into a tree with pplacer to classify them phylogenetically.''' % __version__
                                , epilog='Joel Boyd, Ben Woodcroft')
    parser.add_argument('--forward', metavar='forward read (or single read file)', type=str, help='comma separated list of forward reads .fa, or .fq.gz format.', required=True)
    parser.add_argument('--reverse', metavar='reverse read', type=str, help='[do NOT use unless you understand the difficulties with this] Optional reverse raw sequence file in .fa, or .fq.gz format.', default=argparse.SUPPRESS)
    parser.add_argument('--type', metavar='P or D', type=str, help='dna (like 16S) or prot (like mcrA)', choices=['P', 'D'], required=True)
    parser.add_argument('--eval', metavar='evalue', type=str, help='evalue cutoff for the hmmsearch (default = 1e-5)', default= '1e-5')
    parser.add_argument('--threads', metavar='threads', type=str, help='number of threads to use', default='5')
    parser.add_argument('--placements_cutoff', metavar='confidence', type=str, help='Cutoff of placement confidence level (0.5 - 1), default = 0.75', default=0.75)
    parser.add_argument('--graftm_package', metavar='reference_package', type=str, help='Reference package of gene family', default=argparse.SUPPRESS)
    parser.add_argument('--force', action="store_true", help='Force overwrite the output directory, even if one already exists with the same name', default=False)
    parser.add_argument('--skip_placement', action="store_true", help='Stop after reads have been identified and aligned', default=False)
    parser.add_argument('--search_only', action="store_true", help='Stop after reads have been identified', default=False)
    parser.add_argument('--check_total_euks', action="store_true", help='Search whole sample for euks', default=False)
    parser.add_argument('--hmm_file', type=str, help='HMM file that hmmsearch uses', default=argparse.SUPPRESS)
    parser.add_argument('--output_statistics', type=str, help='output simple runtime statistics into this file', default=argparse.SUPPRESS)
    parser.add_argument('--reference_package', type=str, help='Reference package that pplacer uses', default=argparse.SUPPRESS)
    parser.add_argument('--output_stats', metavar='output directory', type=str, help='Specify an output directory (default is the file name) If you are looking for more than one marker gene in the same directory, you will definitely need this flag to avoid clobbering.', default=argparse.SUPPRESS)
    parser.add_argument('--version', action='version', version='graftM v%s' % __version__)
    
    args = parser.parse_args()
    
    Run(args).main()
    exit(0)
    
    # Summary of class abbreviations:
    # Messenger         = M
    # GraftMFiles       = GMF
    # Alignment_Manager = AM
    # Hmmer             = H
    # Pplacer           = P
    # HouseKeeping      = HK
    # Stats_And_Summary = SAS